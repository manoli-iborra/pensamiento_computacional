{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\u00bfQu\u00e9 es el pensamiento computacional","text":"<p>El pensamiento computacional es un enfoque de resoluci\u00f3n de problemas que utiliza conceptos y principios de la inform\u00e1tica. Es una habilidad clave que no solo se aplica al desarrollo de software o a la programaci\u00f3n, sino que puede usarse para abordar y resolver problemas complejos en diversas \u00e1reas de una forma estructurada y eficiente.</p> <p>Wing acu\u00f1\u00f3 el concepto en 2006 como \"aplicar procesos de pensamiento l\u00f3gico, sist\u00e9mico, algor\u00edtmico\u2026 para lograr representar las soluciones a un problema como secuencias de instrucciones y algoritmos\".</p> <p>El pensamiento computacional es \"el proceso de pensamiento que interviene en la formulaci\u00f3n de los problemas y sus soluciones, de manera que las soluciones se representen de forma que pueda ser realizada por un procesador de informaci\u00f3n\" (Cuny, Snyder y Wing, 2010).</p> <p>Otra definici\u00f3n ampliamente aceptada de pensamiento computacional afirma que es un \"proceso por el cual se reconocen aspectos de la inform\u00e1tica en el mundo que nos rodea y aplicar herramientas y t\u00e9cnicas de la inform\u00e1tica para comprender sistemas y procesos naturales y artificiales\" (Royal Society, 2012).</p> <p>Seymour Papert (1980s)</p> <p>Aunque Papert no us\u00f3 el t\u00e9rmino \"pensamiento computacional\", su trabajo sobre el uso del computador en la educaci\u00f3n influy\u00f3 fuertemente en este concepto. Papert desarroll\u00f3 el lenguaje de programaci\u00f3n Logo para ense\u00f1ar a los ni\u00f1os a programar y resolver problemas. Argumentaba que aprender a programar les permite a los estudiantes desarrollar habilidades de resoluci\u00f3n de problemas de manera creativa.</p> <p></p>"},{"location":"index.html#claves-del-pensamiento-computacional","title":"Claves del pensamiento computacional","text":"<ol> <li> <p>Descomposici\u00f3n: Consiste en dividir un problema complejo en partes m\u00e1s peque\u00f1as y manejables.Es importante ya que facilita el an\u00e1lisis y la comprensi\u00f3n del problema, permitiendo abordar cada parte por separado y buscar soluciones para cada una de ellas. Por ejemplo, al construir un robot, se pueden dividir las tareas en dise\u00f1o mec\u00e1nico, programaci\u00f3n de los movimientos, sensores, etc.</p> </li> <li> <p>Reconocimiento de patrones: Implica identificar similitudes o elementos comunes entre diferentes problemas o situaciones. Al reconocer patrones, se pueden reutilizar soluciones que ya han funcionado en situaciones similares, lo que ahorra tiempo y esfuerzo. En inform\u00e1tica, por ejemplo, los algoritmos eficientes se basan en patrones comunes que se aplican en diferentes contextos.</p> </li> <li> <p>Abstracci\u00f3n: Es el proceso de enfocarse en la informaci\u00f3n relevante y eliminar los detalles no esenciales. Facilita la resoluci\u00f3n de problemas complejos al centrarse en los elementos clave. La abstracci\u00f3n es fundamental para dise\u00f1ar modelos y simplificar problemas, permitiendo que se resuelvan de manera m\u00e1s r\u00e1pida y eficiente.</p> </li> <li> <p>Algoritmos: Un algoritmo es un conjunto de pasos o instrucciones bien definidas para resolver un problema. Los algoritmos son esenciales en el pensamiento computacional porque proporcionan un enfoque sistem\u00e1tico para la resoluci\u00f3n de problemas. Estos permiten encontrar soluciones paso a paso y pueden ser aplicados tanto en problemas de programaci\u00f3n como en situaciones cotidianas, como seguir una receta o una rutina de ejercicio.</p> </li> <li> <p>Evaluaci\u00f3n y depuraci\u00f3n: Implica revisar, probar y mejorar soluciones o algoritmos para asegurarse de que funcionen de manera \u00f3ptima. A trav\u00e9s de la evaluaci\u00f3n, se identifican errores o ineficiencias en la soluci\u00f3n. La depuraci\u00f3n es el proceso de corregir esos errores para mejorar la eficacia y la precisi\u00f3n. Este paso es fundamental para garantizar que la soluci\u00f3n es adecuada y efectiva.</p> </li> <li> <p>Generalizaci\u00f3n: Se refiere a la capacidad de aplicar una soluci\u00f3n a problemas similares o relacionados. La generalizaci\u00f3n permite que una soluci\u00f3n no solo funcione para un problema espec\u00edfico, sino que se extienda a otros problemas que comparten caracter\u00edsticas similares. Esto maximiza la eficiencia del esfuerzo aplicado en la resoluci\u00f3n de problemas.</p> </li> <li> <p>Pensamiento l\u00f3gico: Es la capacidad de razonar y tomar decisiones basadas en hechos y reglas claras. El pensamiento l\u00f3gico es esencial para tomar decisiones informadas y coherentes en cada paso del proceso de resoluci\u00f3n de problemas. Es la base que sustenta todas las dem\u00e1s habilidades del pensamiento computacional, asegurando que las soluciones sean l\u00f3gicas y racionales.</p> </li> <li> <p>Iteraci\u00f3n: Se refiere al proceso de repetir un conjunto de pasos hasta que se logre el resultado deseado. La iteraci\u00f3n permite mejorar y refinar soluciones de manera continua. En inform\u00e1tica, la iteraci\u00f3n es clave en la creaci\u00f3n de programas o algoritmos que necesitan ser probados y ajustados constantemente.</p> </li> </ol> <p></p>"}]}